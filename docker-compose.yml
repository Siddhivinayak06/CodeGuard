version: "3.9"

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: codeguard-frontend
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - PORT=3000
      - NEXT_PUBLIC_INTERACTIVE_WS_URL=ws://localhost:5001
      - BACKEND_URL=http://localhost:5000
    depends_on:
      - backend
      - interactive-backend
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: codeguard-backend
    expose:
      - "5000"
    env_file:
      - .env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  interactive-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.interactive
    image: codeguard-interactive-backend
    command: ["node", "src/interactiveserver.js"]
    ports:
      - "5001:5001"
    expose:
      - "5001"
    env_file:
      - .env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./workspace:/app/workspace
    depends_on:
      - backend
    user: root
    restart: unless-stopped
     

  db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: codeguard
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      retries: 10
      start_period: 10s
    restart: unless-stopped

  python-runtime:
    build:
      context: ./backend
      dockerfile: Dockerfile.python
    image: codeguard-python
    command: tail -f /dev/null
    restart: unless-stopped

  c-runtime:
    build:
      context: ./backend
      dockerfile: Dockerfile.c
    image: codeguard-c
    command: tail -f /dev/null
    restart: unless-stopped

volumes:
  pgdata:
