version: "3.9"

networks:
  app_net:
    driver: bridge

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL:?NEXT_PUBLIC_SUPABASE_URL is required}
        - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY:?NEXT_PUBLIC_SUPABASE_ANON_KEY is required}
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:?NEXT_PUBLIC_API_URL is required}
        - NEXT_PUBLIC_DEV_SUPABASE_REDIRECT_URL=${NEXT_PUBLIC_DEV_SUPABASE_REDIRECT_URL:-}
    image: ${FRONTEND_IMAGE:-codeguard-frontend}:${FRONTEND_TAG:-latest}
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${FRONTEND_PORT:-3000}
      - BACKEND_URL=http://backend:5000
      - EXECUTE_URL=http://backend:5000/execute
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_DEV_SUPABASE_REDIRECT_URL=${NEXT_PUBLIC_DEV_SUPABASE_REDIRECT_URL}
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app_net
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:3000/ || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: ${BACKEND_IMAGE:-codeguard-backend}:${BACKEND_TAG:-latest}
    ports:
      - "5002:5000"   # Express API
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - PORT=${BACKEND_INTERNAL_PORT:-5000}
      - INTERACTIVE_PORT=${INTERACTIVE_PORT:-5000}
      - WORKSPACE_DIR=/app/workspace
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - ./workspace:/app/workspace
    restart: unless-stopped
    networks:
      - app_net
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  python-runtime:
    build:
      context: ./backend
      dockerfile: Dockerfile.python
    image: ${PY_RUNTIME_IMAGE:-codeguard-python}:${PY_RUNTIME_TAG:-latest}
    command: tail -f /dev/null
    expose:
      - "8080"
    restart: unless-stopped
    networks:
      - app_net

  c-runtime:
    build:
      context: ./backend
      dockerfile: Dockerfile.c
    image: ${C_RUNTIME_IMAGE:-codeguard-c}:${C_RUNTIME_TAG:-latest}
    command: tail -f /dev/null
    expose:
      - "8081"
    restart: unless-stopped
    networks:
      - app_net

volumes:
  pgdata: {}
